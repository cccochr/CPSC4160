#include "TwoWayMultiSprite.h"
#include "gamedata.h"
#include "renderContext.h"

void TwoWayMultiSprite::advanceFrame(Uint32 ticks) {
	timeSinceLastFrame += ticks;
	if (timeSinceLastFrame > frameInterval) {
    currentFrame = (currentFrame+1) % numberOfFrames;
		timeSinceLastFrame = 0;
	}
}

TwoWayMultiSprite::TwoWayMultiSprite( const std::string& name) :
  Drawable(name, 
           Vector2f(Gamedata::getInstance().getXmlInt(name+"/startLoc/x"), 
                    Gamedata::getInstance().getXmlInt(name+"/startLoc/y")), 
           Vector2f(Gamedata::getInstance().getXmlInt(name+"/speedX"),
                    Gamedata::getInstance().getXmlInt(name+"/speedY"))
           ),
  imagesRight( ImageFactory::getInstance().getImages(name) ),
  imagesLeft( ImageFactory::getInstance().getImages(name + "Left") ),
  images(imagesRight),
  currentFrame(0),
  numberOfFrames( Gamedata::getInstance().getXmlInt(name+"/frames") ),
  frameInterval( Gamedata::getInstance().getXmlInt(name+"/frameInterval")),
  timeSinceLastFrame(0),
  currentChannel(1),
  channelMovement(-2),
  worldWidth(Gamedata::getInstance().getXmlInt("world/width")),
  worldHeight(Gamedata::getInstance().getXmlInt("world/height"))
{ }

TwoWayMultiSprite::TwoWayMultiSprite(const TwoWayMultiSprite& s) :
  Drawable(s), 
  imagesRight( s.imagesRight),
  imagesLeft(s.imagesLeft),
  images(s.imagesRight),
  currentFrame(s.currentFrame),
  numberOfFrames( s.numberOfFrames ),
  frameInterval( s.frameInterval ),
  timeSinceLastFrame( s.timeSinceLastFrame ),
  currentChannel(s.currentChannel),
  channelMovement(s.channelMovement),
  worldWidth( s.worldWidth ),
  worldHeight( s.worldHeight )
  { }

TwoWayMultiSprite& TwoWayMultiSprite::operator=(const TwoWayMultiSprite& s) {
  Drawable::operator=(s);
  currentFrame = (s.currentFrame);
  numberOfFrames = ( s.numberOfFrames );
  frameInterval = ( s.frameInterval );
  timeSinceLastFrame = ( s.timeSinceLastFrame );
  currentChannel = (s.currentChannel);
  channelMovement = (s.channelMovement);
  worldWidth = ( s.worldWidth );
  worldHeight = ( s.worldHeight );
  return *this;
}

void TwoWayMultiSprite::draw() const { 
  images[currentFrame]->draw(getX(), getY(), getScale());
}

void TwoWayMultiSprite::turnRight(){
    images = imagesRight;
}

void TwoWayMultiSprite::turnLeft(){
    images = imagesLeft;
}

void TwoWayMultiSprite::up(){  
  if(channelMovement != 0) return;
  if(currentChannel == Gamedata::getInstance().getXmlInt("foreground/playerChannels")) return;
  channelMovement = 1;
}

void TwoWayMultiSprite::down(){
  if(channelMovement != 0) return;
  if(currentChannel == 1) return;
  channelMovement = 2;
}

int TwoWayMultiSprite::getNewChannelY(bool direction){
  if(direction) return ( (Gamedata::getInstance().getXmlInt("world/height")) - ( (currentChannel)*(Gamedata::getInstance().getXmlInt("foreground/channelHeight")))); 
  else return ( (Gamedata::getInstance().getXmlInt("world/height")) + ( (currentChannel)*(Gamedata::getInstance().getXmlInt("foreground/channelHeight")))); 
}


void TwoWayMultiSprite::update(Uint32 ticks) { 
  advanceFrame(ticks);

  //up
  if(channelMovement == 1){

    std::cout << "moving up" << std::endl;

    //setY(getY()-(Gamedata::getInstance().getXmlInt("foreground/channelHeight")));
    setVelocityY(-100);
    //made it to new channel          
    if(getY() <= getNewChannelY(true)){	
    channelMovement = 0;
    currentChannel++;
    setVelocityY(0);
    std::cout << "moved up" << std::endl;
    }

  }
  //down
  else if(channelMovement == 2){
 
    std::cout << "moving down" << std::endl;

    //setY(getY()+(Gamedata::getInstance().getXmlInt("foreground/channelHeight")));
    setVelocityY(100);
    //made it to new channel
    if(getY() >= getNewChannelY(false)){
    channelMovement = 0;
    currentChannel--;
    setVelocityY(0);
    std::cout << "moved down" << std::endl;
    }

  }
  //initialize
  else if(channelMovement == -2){
  setY(getY());
  channelMovement = 0;
  }

   // std::cout << currentChannel << std::endl;

  //upper bound
  if ( getY() < 0) {
    setVelocityY( fabs( getVelocityY() ) );
  }
  //lower bound
  if ( getY() > worldHeight-getScaledHeight()) {
    setVelocityY( -fabs( getVelocityY() ) );
  }
  //left bound
  if ( getX() < 0) {
    setVelocityX( fabs( getVelocityX() ) );
    turnRight();
  }
  //right bound
  if ( getX() > worldWidth-getScaledWidth()) {
    setVelocityX( -fabs( getVelocityX() ) );
    turnLeft();
  }   

  Vector2f incr = getVelocity() * static_cast<float>(ticks) * 0.001;
  setPosition(getPosition() + incr); 

}
